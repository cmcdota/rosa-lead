// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------
/// Event wrapper
/// @author Harry Roberts
/// @param {Bool} $self [false] - Whether or not to include current selector
/// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@mixin on-event($self: false) {
    @if $self {
        &,
        &:hover,
        &:active,
        &:focus {
            @content;
        }
    }
    @else {
        &:hover,
        &:active,
        &:focus {
            @content;
        }
    }
}

/// Make a context based selector a little more friendly
/// @author Hugo Giraudel
/// @param {String} $context
@mixin when-inside($context) {
    #{$context} & {
        @content;
    }
}

@mixin button-reset {
    padding: 0;
    border: none;
    font-family: inherit;
    color: inherit;
    background-color: transparent;
    cursor: pointer;
}

@mixin truncate($truncation-boundary) {
    max-width: $truncation-boundary;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

@mixin hardware($backface: true, $perspective: 1000) {
    @if $backface {
        backface-visibility: hidden;
    }
    perspective: $perspective;
}

// @include input-placeholder {
//     color: $grey;
// }
@mixin input-placeholder {
    &.placeholder {
        @content;
    }
    &:-moz-placeholder {
        @content;
    }
    &::-moz-placeholder {
        @content;
    }
    &:-ms-input-placeholder {
        @content;
    }
    &::-webkit-input-placeholder {
        @content;
    }
}

// div::after {
//    @include pseudo;
//    top: -1rem; left: -1rem;
//    width: 1rem; height: 1rem;
//}
@mixin pseudo($display: block, $pos: absolute, $content: '') {
    content: $content;
    display: $display;
    position: $pos;
}

@mixin reset($type) {
    $resets: ( ul: ( list-style: none, margin: 0, padding: 0, li: ( margin: 0, padding: 0)));
    @each $prop,
    $value in map-get($resets, $type) {
        @if type-of($value)=='map' {
            &>#{$prop} {
                @each $sub-prop,
                $sub-value in $value {
                    #{$sub-prop}: $sub-value;
                }
            }
        }
        @else {
            #{$prop}: $value;
        }
    }
}